ARM GAS  /tmp/ccAEfvV1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB69:
  24              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  /tmp/ccAEfvV1.s 			page 2


  35:Core/Src/main.c **** /* USER CODE END PD */
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/main.c **** /* USER CODE BEGIN PM */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** #define BMS_USES_THERM 0    // Set to enable thermistor reading
  41:Core/Src/main.c **** #define BMS_FAST_SAMPL 0    // 0 = 50ms/cell, 1 = 100us/cell (pg. 42)
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** // Cell overvoltage controls
  44:Core/Src/main.c **** // See pg. 46 of Jan 2009 pq77PL900 datasheet
  45:Core/Src/main.c **** #define BMS_OV_THRSH 0x00   // The overvoltage threshold for a cell (4.15v)
  46:Core/Src/main.c **** #define BMS_OV_HYSTR 0x00   // Hysteresis voltage (0.1v)
  47:Core/Src/main.c **** #define BMS_OV_DLYTM 0x00   // Overvoltage delay time (0.5s)
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** // Cell undervoltage controls
  50:Core/Src/main.c **** // See pg. 47 of Jan 2009 pq77PL900 datasheet
  51:Core/Src/main.c **** #define BMS_UV_THRSH 0x00   // The overvoltage threshold for a cell (1.4v)
  52:Core/Src/main.c **** #define BMS_UV_HYSTR 0x00   // Hysteresis voltage (0.2v)
  53:Core/Src/main.c **** #define BMS_UV_SHDWN 0x00   // On undervoltage condition, automatically turn off
  54:Core/Src/main.c ****                             //  pack output
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE END PM */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  59:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  60:Core/Src/main.c **** ADC_HandleTypeDef hadc2;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** /* USER CODE BEGIN PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* USER CODE END PV */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  67:Core/Src/main.c **** void SystemClock_Config(void);
  68:Core/Src/main.c **** static void MX_GPIO_Init(void);
  69:Core/Src/main.c **** static void MX_ADC1_Init(void);
  70:Core/Src/main.c **** static void MX_ADC2_Init(void);
  71:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** /* USER CODE END PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  76:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /* USER CODE END 0 */
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** /**
  81:Core/Src/main.c ****   * @brief  The application entry point.
  82:Core/Src/main.c ****   * @retval int
  83:Core/Src/main.c ****   */
  84:Core/Src/main.c **** int main(void)
  85:Core/Src/main.c **** {
  86:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE END 1 */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  91:Core/Src/main.c **** 
ARM GAS  /tmp/ccAEfvV1.s 			page 3


  92:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  93:Core/Src/main.c ****   HAL_Init();
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c ****   /* USER CODE END Init */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c ****   /* Configure the system clock */
 100:Core/Src/main.c ****   SystemClock_Config();
 101:Core/Src/main.c **** 
 102:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c ****   /* USER CODE END SysInit */
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* Initialize all configured peripherals */
 107:Core/Src/main.c ****   MX_GPIO_Init();
 108:Core/Src/main.c ****   MX_ADC1_Init();
 109:Core/Src/main.c ****   MX_ADC2_Init();
 110:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE END 2 */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* Infinite loop */
 115:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 116:Core/Src/main.c ****   while (1)
 117:Core/Src/main.c ****   {
 118:Core/Src/main.c ****     /* USER CODE END WHILE */
 119:Core/Src/main.c **** 
 120:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****     // Zach code
 123:Core/Src/main.c ****     
 124:Core/Src/main.c ****   }
 125:Core/Src/main.c ****   /* USER CODE END 3 */
 126:Core/Src/main.c **** }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /**
 129:Core/Src/main.c ****   * @brief System Clock Configuration
 130:Core/Src/main.c ****   * @retval None
 131:Core/Src/main.c ****   */
 132:Core/Src/main.c **** void SystemClock_Config(void)
 133:Core/Src/main.c **** {
 134:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 135:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 136:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 139:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 140:Core/Src/main.c ****   */
 141:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 143:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 144:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 145:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 146:Core/Src/main.c ****   {
 147:Core/Src/main.c ****     Error_Handler();
 148:Core/Src/main.c ****   }
ARM GAS  /tmp/ccAEfvV1.s 			page 4


 149:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 150:Core/Src/main.c ****   */
 151:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 152:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 153:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 154:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 155:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 156:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 159:Core/Src/main.c ****   {
 160:Core/Src/main.c ****     Error_Handler();
 161:Core/Src/main.c ****   }
 162:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 163:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 164:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     Error_Handler();
 167:Core/Src/main.c ****   }
 168:Core/Src/main.c **** }
 169:Core/Src/main.c **** 
 170:Core/Src/main.c **** /**
 171:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 172:Core/Src/main.c ****   * @param None
 173:Core/Src/main.c ****   * @retval None
 174:Core/Src/main.c ****   */
 175:Core/Src/main.c **** static void MX_ADC1_Init(void)
 176:Core/Src/main.c **** {
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 187:Core/Src/main.c ****   /** Common config
 188:Core/Src/main.c ****   */
 189:Core/Src/main.c ****   hadc1.Instance = ADC1;
 190:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 191:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 192:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 193:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 194:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 195:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 196:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 197:Core/Src/main.c ****   {
 198:Core/Src/main.c ****     Error_Handler();
 199:Core/Src/main.c ****   }
 200:Core/Src/main.c ****   /** Configure Regular Channel
 201:Core/Src/main.c ****   */
 202:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 203:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 204:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 205:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
ARM GAS  /tmp/ccAEfvV1.s 			page 5


 206:Core/Src/main.c ****   {
 207:Core/Src/main.c ****     Error_Handler();
 208:Core/Src/main.c ****   }
 209:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 210:Core/Src/main.c **** 
 211:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 212:Core/Src/main.c **** 
 213:Core/Src/main.c **** }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c **** /**
 216:Core/Src/main.c ****   * @brief ADC2 Initialization Function
 217:Core/Src/main.c ****   * @param None
 218:Core/Src/main.c ****   * @retval None
 219:Core/Src/main.c ****   */
 220:Core/Src/main.c **** static void MX_ADC2_Init(void)
 221:Core/Src/main.c **** {
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 0 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****   /* USER CODE END ADC2_Init 0 */
 226:Core/Src/main.c **** 
 227:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 228:Core/Src/main.c **** 
 229:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 1 */
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /* USER CODE END ADC2_Init 1 */
 232:Core/Src/main.c ****   /** Common config
 233:Core/Src/main.c ****   */
 234:Core/Src/main.c ****   hadc2.Instance = ADC2;
 235:Core/Src/main.c ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 236:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 237:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 238:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 239:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 240:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 241:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   /** Configure Regular Channel
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_3;
 248:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 249:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 250:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 251:Core/Src/main.c ****   {
 252:Core/Src/main.c ****     Error_Handler();
 253:Core/Src/main.c ****   }
 254:Core/Src/main.c ****   /* USER CODE BEGIN ADC2_Init 2 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE END ADC2_Init 2 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c **** }
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /**
 261:Core/Src/main.c ****   * @brief GPIO Initialization Function
 262:Core/Src/main.c ****   * @param None
ARM GAS  /tmp/ccAEfvV1.s 			page 6


 263:Core/Src/main.c ****   * @retval None
 264:Core/Src/main.c ****   */
 265:Core/Src/main.c **** static void MX_GPIO_Init(void)
 266:Core/Src/main.c **** {
  25              		.loc 1 266 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 30B5     		push	{r4, r5, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 12
  32              		.cfi_offset 4, -12
  33              		.cfi_offset 5, -8
  34              		.cfi_offset 14, -4
  35 0002 89B0     		sub	sp, sp, #36
  36              	.LCFI1:
  37              		.cfi_def_cfa_offset 48
 267:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  38              		.loc 1 267 0
  39 0004 0024     		movs	r4, #0
  40 0006 0494     		str	r4, [sp, #16]
  41 0008 0594     		str	r4, [sp, #20]
  42 000a 0694     		str	r4, [sp, #24]
  43 000c 0794     		str	r4, [sp, #28]
  44              	.LBB4:
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 270:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  45              		.loc 1 270 0
  46 000e 2A4B     		ldr	r3, .L3
  47 0010 9A69     		ldr	r2, [r3, #24]
  48 0012 42F01002 		orr	r2, r2, #16
  49 0016 9A61     		str	r2, [r3, #24]
  50 0018 9A69     		ldr	r2, [r3, #24]
  51 001a 02F01002 		and	r2, r2, #16
  52 001e 0092     		str	r2, [sp]
  53 0020 009A     		ldr	r2, [sp]
  54              	.LBE4:
  55              	.LBB5:
 271:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  56              		.loc 1 271 0
  57 0022 9A69     		ldr	r2, [r3, #24]
  58 0024 42F02002 		orr	r2, r2, #32
  59 0028 9A61     		str	r2, [r3, #24]
  60 002a 9A69     		ldr	r2, [r3, #24]
  61 002c 02F02002 		and	r2, r2, #32
  62 0030 0192     		str	r2, [sp, #4]
  63 0032 019A     		ldr	r2, [sp, #4]
  64              	.LBE5:
  65              	.LBB6:
 272:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  66              		.loc 1 272 0
  67 0034 9A69     		ldr	r2, [r3, #24]
  68 0036 42F00402 		orr	r2, r2, #4
  69 003a 9A61     		str	r2, [r3, #24]
  70 003c 9A69     		ldr	r2, [r3, #24]
  71 003e 02F00402 		and	r2, r2, #4
ARM GAS  /tmp/ccAEfvV1.s 			page 7


  72 0042 0292     		str	r2, [sp, #8]
  73 0044 029A     		ldr	r2, [sp, #8]
  74              	.LBE6:
  75              	.LBB7:
 273:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  76              		.loc 1 273 0
  77 0046 9A69     		ldr	r2, [r3, #24]
  78 0048 42F00802 		orr	r2, r2, #8
  79 004c 9A61     		str	r2, [r3, #24]
  80 004e 9B69     		ldr	r3, [r3, #24]
  81 0050 03F00803 		and	r3, r3, #8
  82 0054 0393     		str	r3, [sp, #12]
  83 0056 039B     		ldr	r3, [sp, #12]
  84              	.LBE7:
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 276:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
  85              		.loc 1 276 0
  86 0058 184D     		ldr	r5, .L3+4
  87 005a 2246     		mov	r2, r4
  88 005c 4FF20301 		movw	r1, #61443
  89 0060 2846     		mov	r0, r5
  90 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
  91              	.LVL0:
 277:Core/Src/main.c ****                           |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 278:Core/Src/main.c **** 
 279:Core/Src/main.c ****   /*Configure GPIO pin : PA5 */
 280:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
  92              		.loc 1 280 0
  93 0066 2023     		movs	r3, #32
  94 0068 0493     		str	r3, [sp, #16]
 281:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  95              		.loc 1 281 0
  96 006a 0594     		str	r4, [sp, #20]
 282:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  97              		.loc 1 282 0
  98 006c 0694     		str	r4, [sp, #24]
 283:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  99              		.loc 1 283 0
 100 006e 04A9     		add	r1, sp, #16
 101 0070 1348     		ldr	r0, .L3+8
 102 0072 FFF7FEFF 		bl	HAL_GPIO_Init
 103              	.LVL1:
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /*Configure GPIO pins : PB0 PB1 PB12 PB13
 286:Core/Src/main.c ****                            PB14 PB15 */
 287:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 104              		.loc 1 287 0
 105 0076 4FF20303 		movw	r3, #61443
 106 007a 0493     		str	r3, [sp, #16]
 288:Core/Src/main.c ****                           |GPIO_PIN_14|GPIO_PIN_15;
 289:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 107              		.loc 1 289 0
 108 007c 0123     		movs	r3, #1
 109 007e 0593     		str	r3, [sp, #20]
 290:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 110              		.loc 1 290 0
ARM GAS  /tmp/ccAEfvV1.s 			page 8


 111 0080 0694     		str	r4, [sp, #24]
 291:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 112              		.loc 1 291 0
 113 0082 0223     		movs	r3, #2
 114 0084 0793     		str	r3, [sp, #28]
 292:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 115              		.loc 1 292 0
 116 0086 04A9     		add	r1, sp, #16
 117 0088 2846     		mov	r0, r5
 118 008a FFF7FEFF 		bl	HAL_GPIO_Init
 119              	.LVL2:
 293:Core/Src/main.c **** 
 294:Core/Src/main.c ****   /*Configure GPIO pin : PB2 */
 295:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 120              		.loc 1 295 0
 121 008e 0423     		movs	r3, #4
 122 0090 0493     		str	r3, [sp, #16]
 296:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 123              		.loc 1 296 0
 124 0092 0594     		str	r4, [sp, #20]
 297:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 125              		.loc 1 297 0
 126 0094 0694     		str	r4, [sp, #24]
 298:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 127              		.loc 1 298 0
 128 0096 04A9     		add	r1, sp, #16
 129 0098 2846     		mov	r0, r5
 130 009a FFF7FEFF 		bl	HAL_GPIO_Init
 131              	.LVL3:
 299:Core/Src/main.c **** 
 300:Core/Src/main.c ****   /*Configure GPIO pins : PB10 PB11 PB6 PB7 */
 301:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_6|GPIO_PIN_7;
 132              		.loc 1 301 0
 133 009e 4FF44C63 		mov	r3, #3264
 134 00a2 0493     		str	r3, [sp, #16]
 302:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 135              		.loc 1 302 0
 136 00a4 1223     		movs	r3, #18
 137 00a6 0593     		str	r3, [sp, #20]
 303:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 138              		.loc 1 303 0
 139 00a8 0323     		movs	r3, #3
 140 00aa 0793     		str	r3, [sp, #28]
 304:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 141              		.loc 1 304 0
 142 00ac 04A9     		add	r1, sp, #16
 143 00ae 2846     		mov	r0, r5
 144 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 145              	.LVL4:
 305:Core/Src/main.c **** 
 306:Core/Src/main.c **** }
 146              		.loc 1 306 0
 147 00b4 09B0     		add	sp, sp, #36
 148              	.LCFI2:
 149              		.cfi_def_cfa_offset 12
 150              		@ sp needed
 151 00b6 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccAEfvV1.s 			page 9


 152              	.L4:
 153              		.align	2
 154              	.L3:
 155 00b8 00100240 		.word	1073876992
 156 00bc 000C0140 		.word	1073810432
 157 00c0 00080140 		.word	1073809408
 158              		.cfi_endproc
 159              	.LFE69:
 161              		.section	.text.Error_Handler,"ax",%progbits
 162              		.align	1
 163              		.global	Error_Handler
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu softvfp
 169              	Error_Handler:
 170              	.LFB70:
 307:Core/Src/main.c **** 
 308:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 309:Core/Src/main.c **** 
 310:Core/Src/main.c **** /* USER CODE END 4 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c **** /**
 313:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 314:Core/Src/main.c ****   * @retval None
 315:Core/Src/main.c ****   */
 316:Core/Src/main.c **** void Error_Handler(void)
 317:Core/Src/main.c **** {
 171              		.loc 1 317 0
 172              		.cfi_startproc
 173              		@ Volatile: function does not return.
 174              		@ args = 0, pretend = 0, frame = 0
 175              		@ frame_needed = 0, uses_anonymous_args = 0
 176              		@ link register save eliminated.
 177              	.LBB8:
 178              	.LBB9:
 179              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  /tmp/ccAEfvV1.s 			page 10


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccAEfvV1.s 			page 11


  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccAEfvV1.s 			page 12


 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 180              		.loc 2 142 0
 181              		.syntax unified
 182              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 183 0000 72B6     		cpsid i
 184              	@ 0 "" 2
 185              		.thumb
 186              		.syntax unified
 187              	.L6:
 188 0002 FEE7     		b	.L6
 189              	.LBE9:
 190              	.LBE8:
 191              		.cfi_endproc
 192              	.LFE70:
 194              		.section	.text.MX_ADC1_Init,"ax",%progbits
 195              		.align	1
 196              		.syntax unified
 197              		.thumb
 198              		.thumb_func
 199              		.fpu softvfp
 201              	MX_ADC1_Init:
 202              	.LFB67:
 176:Core/Src/main.c **** 
 203              		.loc 1 176 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 16
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 00B5     		push	{lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 4
 210              		.cfi_offset 14, -4
 211 0002 85B0     		sub	sp, sp, #20
 212              	.LCFI4:
 213              		.cfi_def_cfa_offset 24
 182:Core/Src/main.c **** 
 214              		.loc 1 182 0
 215 0004 0023     		movs	r3, #0
 216 0006 0193     		str	r3, [sp, #4]
 217 0008 0293     		str	r3, [sp, #8]
 218 000a 0393     		str	r3, [sp, #12]
 189:Core/Src/main.c ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 219              		.loc 1 189 0
 220 000c 0F48     		ldr	r0, .L13
 221 000e 104A     		ldr	r2, .L13+4
 222 0010 0260     		str	r2, [r0]
 190:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 223              		.loc 1 190 0
 224 0012 8360     		str	r3, [r0, #8]
 191:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 225              		.loc 1 191 0
ARM GAS  /tmp/ccAEfvV1.s 			page 13


 226 0014 0373     		strb	r3, [r0, #12]
 192:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 227              		.loc 1 192 0
 228 0016 0375     		strb	r3, [r0, #20]
 193:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 229              		.loc 1 193 0
 230 0018 4FF46022 		mov	r2, #917504
 231 001c C261     		str	r2, [r0, #28]
 194:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 232              		.loc 1 194 0
 233 001e 4360     		str	r3, [r0, #4]
 195:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 234              		.loc 1 195 0
 235 0020 0123     		movs	r3, #1
 236 0022 0361     		str	r3, [r0, #16]
 196:Core/Src/main.c ****   {
 237              		.loc 1 196 0
 238 0024 FFF7FEFF 		bl	HAL_ADC_Init
 239              	.LVL5:
 240 0028 60B9     		cbnz	r0, .L11
 202:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 241              		.loc 1 202 0
 242 002a 0123     		movs	r3, #1
 243 002c 0193     		str	r3, [sp, #4]
 203:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 244              		.loc 1 203 0
 245 002e 0293     		str	r3, [sp, #8]
 204:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 246              		.loc 1 204 0
 247 0030 0023     		movs	r3, #0
 248 0032 0393     		str	r3, [sp, #12]
 205:Core/Src/main.c ****   {
 249              		.loc 1 205 0
 250 0034 01A9     		add	r1, sp, #4
 251 0036 0548     		ldr	r0, .L13
 252 0038 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 253              	.LVL6:
 254 003c 20B9     		cbnz	r0, .L12
 213:Core/Src/main.c **** 
 255              		.loc 1 213 0
 256 003e 05B0     		add	sp, sp, #20
 257              	.LCFI5:
 258              		.cfi_remember_state
 259              		.cfi_def_cfa_offset 4
 260              		@ sp needed
 261 0040 5DF804FB 		ldr	pc, [sp], #4
 262              	.L11:
 263              	.LCFI6:
 264              		.cfi_restore_state
 198:Core/Src/main.c ****   }
 265              		.loc 1 198 0
 266 0044 FFF7FEFF 		bl	Error_Handler
 267              	.LVL7:
 268              	.L12:
 207:Core/Src/main.c ****   }
 269              		.loc 1 207 0
 270 0048 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccAEfvV1.s 			page 14


 271              	.LVL8:
 272              	.L14:
 273              		.align	2
 274              	.L13:
 275 004c 00000000 		.word	hadc1
 276 0050 00240140 		.word	1073816576
 277              		.cfi_endproc
 278              	.LFE67:
 280              		.section	.text.MX_ADC2_Init,"ax",%progbits
 281              		.align	1
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu softvfp
 287              	MX_ADC2_Init:
 288              	.LFB68:
 221:Core/Src/main.c **** 
 289              		.loc 1 221 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293 0000 00B5     		push	{lr}
 294              	.LCFI7:
 295              		.cfi_def_cfa_offset 4
 296              		.cfi_offset 14, -4
 297 0002 85B0     		sub	sp, sp, #20
 298              	.LCFI8:
 299              		.cfi_def_cfa_offset 24
 227:Core/Src/main.c **** 
 300              		.loc 1 227 0
 301 0004 0023     		movs	r3, #0
 302 0006 0193     		str	r3, [sp, #4]
 303 0008 0293     		str	r3, [sp, #8]
 304 000a 0393     		str	r3, [sp, #12]
 234:Core/Src/main.c ****   hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 305              		.loc 1 234 0
 306 000c 1048     		ldr	r0, .L21
 307 000e 114A     		ldr	r2, .L21+4
 308 0010 0260     		str	r2, [r0]
 235:Core/Src/main.c ****   hadc2.Init.ContinuousConvMode = DISABLE;
 309              		.loc 1 235 0
 310 0012 8360     		str	r3, [r0, #8]
 236:Core/Src/main.c ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 311              		.loc 1 236 0
 312 0014 0373     		strb	r3, [r0, #12]
 237:Core/Src/main.c ****   hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 313              		.loc 1 237 0
 314 0016 0375     		strb	r3, [r0, #20]
 238:Core/Src/main.c ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 315              		.loc 1 238 0
 316 0018 4FF46022 		mov	r2, #917504
 317 001c C261     		str	r2, [r0, #28]
 239:Core/Src/main.c ****   hadc2.Init.NbrOfConversion = 1;
 318              		.loc 1 239 0
 319 001e 4360     		str	r3, [r0, #4]
 240:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 320              		.loc 1 240 0
ARM GAS  /tmp/ccAEfvV1.s 			page 15


 321 0020 0123     		movs	r3, #1
 322 0022 0361     		str	r3, [r0, #16]
 241:Core/Src/main.c ****   {
 323              		.loc 1 241 0
 324 0024 FFF7FEFF 		bl	HAL_ADC_Init
 325              	.LVL9:
 326 0028 68B9     		cbnz	r0, .L19
 247:Core/Src/main.c ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 327              		.loc 1 247 0
 328 002a 0323     		movs	r3, #3
 329 002c 0193     		str	r3, [sp, #4]
 248:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 330              		.loc 1 248 0
 331 002e 0123     		movs	r3, #1
 332 0030 0293     		str	r3, [sp, #8]
 249:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 333              		.loc 1 249 0
 334 0032 0023     		movs	r3, #0
 335 0034 0393     		str	r3, [sp, #12]
 250:Core/Src/main.c ****   {
 336              		.loc 1 250 0
 337 0036 01A9     		add	r1, sp, #4
 338 0038 0548     		ldr	r0, .L21
 339 003a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 340              	.LVL10:
 341 003e 20B9     		cbnz	r0, .L20
 258:Core/Src/main.c **** 
 342              		.loc 1 258 0
 343 0040 05B0     		add	sp, sp, #20
 344              	.LCFI9:
 345              		.cfi_remember_state
 346              		.cfi_def_cfa_offset 4
 347              		@ sp needed
 348 0042 5DF804FB 		ldr	pc, [sp], #4
 349              	.L19:
 350              	.LCFI10:
 351              		.cfi_restore_state
 243:Core/Src/main.c ****   }
 352              		.loc 1 243 0
 353 0046 FFF7FEFF 		bl	Error_Handler
 354              	.LVL11:
 355              	.L20:
 252:Core/Src/main.c ****   }
 356              		.loc 1 252 0
 357 004a FFF7FEFF 		bl	Error_Handler
 358              	.LVL12:
 359              	.L22:
 360 004e 00BF     		.align	2
 361              	.L21:
 362 0050 00000000 		.word	hadc2
 363 0054 00280140 		.word	1073817600
 364              		.cfi_endproc
 365              	.LFE68:
 367              		.section	.text.SystemClock_Config,"ax",%progbits
 368              		.align	1
 369              		.global	SystemClock_Config
 370              		.syntax unified
ARM GAS  /tmp/ccAEfvV1.s 			page 16


 371              		.thumb
 372              		.thumb_func
 373              		.fpu softvfp
 375              	SystemClock_Config:
 376              	.LFB66:
 133:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 377              		.loc 1 133 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 80
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381 0000 00B5     		push	{lr}
 382              	.LCFI11:
 383              		.cfi_def_cfa_offset 4
 384              		.cfi_offset 14, -4
 385 0002 95B0     		sub	sp, sp, #84
 386              	.LCFI12:
 387              		.cfi_def_cfa_offset 88
 134:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 388              		.loc 1 134 0
 389 0004 2422     		movs	r2, #36
 390 0006 0021     		movs	r1, #0
 391 0008 0BA8     		add	r0, sp, #44
 392 000a FFF7FEFF 		bl	memset
 393              	.LVL13:
 135:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 394              		.loc 1 135 0
 395 000e 0023     		movs	r3, #0
 396 0010 0593     		str	r3, [sp, #20]
 397 0012 0693     		str	r3, [sp, #24]
 398 0014 0793     		str	r3, [sp, #28]
 399 0016 0893     		str	r3, [sp, #32]
 400 0018 0993     		str	r3, [sp, #36]
 136:Core/Src/main.c **** 
 401              		.loc 1 136 0
 402 001a 0193     		str	r3, [sp, #4]
 403 001c 0293     		str	r3, [sp, #8]
 404 001e 0393     		str	r3, [sp, #12]
 405 0020 0493     		str	r3, [sp, #16]
 141:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 406              		.loc 1 141 0
 407 0022 0223     		movs	r3, #2
 408 0024 0A93     		str	r3, [sp, #40]
 142:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 409              		.loc 1 142 0
 410 0026 0123     		movs	r3, #1
 411 0028 0E93     		str	r3, [sp, #56]
 143:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 412              		.loc 1 143 0
 413 002a 1023     		movs	r3, #16
 414 002c 0F93     		str	r3, [sp, #60]
 145:Core/Src/main.c ****   {
 415              		.loc 1 145 0
 416 002e 0AA8     		add	r0, sp, #40
 417 0030 FFF7FEFF 		bl	HAL_RCC_OscConfig
 418              	.LVL14:
 419 0034 A8B9     		cbnz	r0, .L28
 151:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  /tmp/ccAEfvV1.s 			page 17


 420              		.loc 1 151 0
 421 0036 0F23     		movs	r3, #15
 422 0038 0593     		str	r3, [sp, #20]
 153:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 423              		.loc 1 153 0
 424 003a 0021     		movs	r1, #0
 425 003c 0691     		str	r1, [sp, #24]
 154:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 426              		.loc 1 154 0
 427 003e 0791     		str	r1, [sp, #28]
 155:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 428              		.loc 1 155 0
 429 0040 0891     		str	r1, [sp, #32]
 156:Core/Src/main.c **** 
 430              		.loc 1 156 0
 431 0042 0991     		str	r1, [sp, #36]
 158:Core/Src/main.c ****   {
 432              		.loc 1 158 0
 433 0044 05A8     		add	r0, sp, #20
 434 0046 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 435              	.LVL15:
 436 004a 60B9     		cbnz	r0, .L29
 162:Core/Src/main.c ****   PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 437              		.loc 1 162 0
 438 004c 0223     		movs	r3, #2
 439 004e 0193     		str	r3, [sp, #4]
 163:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 440              		.loc 1 163 0
 441 0050 0023     		movs	r3, #0
 442 0052 0393     		str	r3, [sp, #12]
 164:Core/Src/main.c ****   {
 443              		.loc 1 164 0
 444 0054 01A8     		add	r0, sp, #4
 445 0056 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 446              	.LVL16:
 447 005a 30B9     		cbnz	r0, .L30
 168:Core/Src/main.c **** 
 448              		.loc 1 168 0
 449 005c 15B0     		add	sp, sp, #84
 450              	.LCFI13:
 451              		.cfi_remember_state
 452              		.cfi_def_cfa_offset 4
 453              		@ sp needed
 454 005e 5DF804FB 		ldr	pc, [sp], #4
 455              	.L28:
 456              	.LCFI14:
 457              		.cfi_restore_state
 147:Core/Src/main.c ****   }
 458              		.loc 1 147 0
 459 0062 FFF7FEFF 		bl	Error_Handler
 460              	.LVL17:
 461              	.L29:
 160:Core/Src/main.c ****   }
 462              		.loc 1 160 0
 463 0066 FFF7FEFF 		bl	Error_Handler
 464              	.LVL18:
 465              	.L30:
ARM GAS  /tmp/ccAEfvV1.s 			page 18


 166:Core/Src/main.c ****   }
 466              		.loc 1 166 0
 467 006a FFF7FEFF 		bl	Error_Handler
 468              	.LVL19:
 469              		.cfi_endproc
 470              	.LFE66:
 472              		.section	.text.main,"ax",%progbits
 473              		.align	1
 474              		.global	main
 475              		.syntax unified
 476              		.thumb
 477              		.thumb_func
 478              		.fpu softvfp
 480              	main:
 481              	.LFB65:
  85:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 482              		.loc 1 85 0
 483              		.cfi_startproc
 484              		@ Volatile: function does not return.
 485              		@ args = 0, pretend = 0, frame = 0
 486              		@ frame_needed = 0, uses_anonymous_args = 0
 487 0000 08B5     		push	{r3, lr}
 488              	.LCFI15:
 489              		.cfi_def_cfa_offset 8
 490              		.cfi_offset 3, -8
 491              		.cfi_offset 14, -4
  93:Core/Src/main.c **** 
 492              		.loc 1 93 0
 493 0002 FFF7FEFF 		bl	HAL_Init
 494              	.LVL20:
 100:Core/Src/main.c **** 
 495              		.loc 1 100 0
 496 0006 FFF7FEFF 		bl	SystemClock_Config
 497              	.LVL21:
 107:Core/Src/main.c ****   MX_ADC1_Init();
 498              		.loc 1 107 0
 499 000a FFF7FEFF 		bl	MX_GPIO_Init
 500              	.LVL22:
 108:Core/Src/main.c ****   MX_ADC2_Init();
 501              		.loc 1 108 0
 502 000e FFF7FEFF 		bl	MX_ADC1_Init
 503              	.LVL23:
 109:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 504              		.loc 1 109 0
 505 0012 FFF7FEFF 		bl	MX_ADC2_Init
 506              	.LVL24:
 507              	.L32:
 508 0016 FEE7     		b	.L32
 509              		.cfi_endproc
 510              	.LFE65:
 512              		.comm	hadc2,48,4
 513              		.comm	hadc1,48,4
 514              		.text
 515              	.Letext0:
 516              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 517              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 518              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/ccAEfvV1.s 			page 19


 519              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 520              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 521              		.file 8 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 522              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 523              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 524              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 525              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 526              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 527              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 528              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 529              		.file 16 "<built-in>"
ARM GAS  /tmp/ccAEfvV1.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccAEfvV1.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccAEfvV1.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccAEfvV1.s:155    .text.MX_GPIO_Init:00000000000000b8 $d
     /tmp/ccAEfvV1.s:162    .text.Error_Handler:0000000000000000 $t
     /tmp/ccAEfvV1.s:169    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccAEfvV1.s:195    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccAEfvV1.s:201    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccAEfvV1.s:275    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000030 hadc1
     /tmp/ccAEfvV1.s:281    .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/ccAEfvV1.s:287    .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/ccAEfvV1.s:362    .text.MX_ADC2_Init:0000000000000050 $d
                            *COM*:0000000000000030 hadc2
     /tmp/ccAEfvV1.s:368    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccAEfvV1.s:375    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccAEfvV1.s:473    .text.main:0000000000000000 $t
     /tmp/ccAEfvV1.s:480    .text.main:0000000000000000 main

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
